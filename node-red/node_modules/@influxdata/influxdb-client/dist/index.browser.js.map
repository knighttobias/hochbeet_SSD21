{"version":3,"file":"index.browser.js","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/QueryApi.ts","../src/impl/ObservableQuery.ts","../src/impl/QueryApiImpl.ts","../src/InfluxDB.ts","../src/Point.ts","../src/results/stringToLines.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare const TextDecoder: any\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * Column metadata class of a {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n}\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {FluxTableColumn, ColumnType} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\nconst identity = (x: string): any => x\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/#valid-data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double: (x: string): any => (x === '' ? null : +x),\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied values with the help of columns .\n   * @param values - a row with data for each column\n   */\n  toObject(values: string[]): {[key: string]: any}\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    throw new IllegalArgumentError(`Column ${label} not found!`)\n  }\n  toObject(values: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < values.length; i++) {\n      let val = values[i]\n      const column = this.columns[i]\n      if (val === '' && column.defaultValue) {\n        val = column.defaultValue\n      }\n      acc[column.label] = (typeSerializers[column.dataType] ?? identity)(val)\n    }\n    return acc\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /** socket timeout */\n  timeout?: number\n  /** extra options for the transport layer, they can setup a proxy agent or an abort signal in node.js transport that relies upon {@link https://nodejs.org/api/http.html#http_http_request_url_options_callback } */\n  transportOptions?: {[key: string]: any}\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** include random milliseconds when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay, the next delay is computed as `minRetryDelay * exponentialBase^(attempts-1) + random(retryJitter)` */\n  exponentialBase: number\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempts - a number of failed attempts to write the lines\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempts: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max number of retries when write fails */\n  maxRetries: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  flushInterval: 60000,\n  writeFailed: function() {},\n  writeSuccess: function() {},\n  maxRetries: 3,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 180000,\n  exponentialBase: 5,\n  gzipThreshold: 1000,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function(value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts of Point's timestamp to a string\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Logger: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  if (typeof value === 'number') {\n    if (!isFinite(value)) {\n      throw new Error(`not a flux float: ${value}`)\n    }\n    return value.toString()\n  }\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n      continue\n    }\n    if (c !== '.' && c !== '-' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = sanitizeFloat(value)\n  for (const c of val) {\n    if (c === '.') {\n      throw new Error(`not a flux integer: ${val}`)\n    }\n  }\n  return new FluxParameter(val)\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        let delay = this.options.minRetryDelay\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            break\n          }\n        }\n        return (\n          Math.min(Math.max(delay, 1), this.options.maxRetryDelay) +\n          Math.round(Math.random() * this.options.retryJitter)\n        )\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Logger} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(lines: string[], retryCount: number, delay: number): void {\n    if (this.closed) return\n    if (!lines.length) return\n    const retryTime = Date.now() + delay\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first = newFirst\n      } while (this.first && this.size + lines.length > newSize)\n      Logger.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd = {\n      lines,\n      retryCount,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, delay)\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Logger} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {escape} from '../util/escape'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\n\nclass WriteBuffer {\n  length = 0\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    if (this.length === 0) {\n      this.scheduleSend()\n    }\n    this.lines[this.length] = record\n    this.length++\n    if (this.length >= this.maxChunkRecords) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries + 1\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries + 1)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(lines: string[], attempts: number): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    if (!this.closed && lines.length > 0) {\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            const failedAttempts = self.writeOptions.maxRetries + 2 - attempts\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              attempts > 1 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Logger.warn(\n                `Write to InfluxDB failed (remaining attempts: ${attempts -\n                  1}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                attempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts)\n              )\n              reject(error)\n              return\n            }\n            Logger.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.httpPath,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Logger.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = undefined\n    Object.keys(tags).forEach((key: string) => {\n      ;(this.defaultTags || (this.defaultTags = {}))[key] = escape.tag(\n        tags[key]\n      )\n    })\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Logger} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Logger.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Logger.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function() {}\n}\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Observable} from './observable'\nimport {ParameterizedQuery} from './query'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n} from './results'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/** QueryOptions contains QueryApi configuration options. */\nexport interface QueryOptions {\n  /**\n   * Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably.\n   */\n  org: string\n  /**\n   * Type of the query, default is \"flux\"\n   */\n  type?: 'flux'\n  /**\n   * Requests gzip encoded response.\n   */\n  gzip?: boolean\n  /**\n   * Specifies the time that should be reported as \"now\" in the query. RFC3339 value must be returned,\n   * for example `new Date().toISOString()`.\n   */\n  now?: () => string\n  /**\n   * HTTP headers that will be sent with every query request.\n   */\n  headers?: {[key: string]: string}\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n\n/**\n * Query InfluxDB 2.0. Provides methods that notify abouts result lines of the executed query.\n * See {@link https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery }\n */\nexport default interface QueryApi {\n  /**\n   * Returns a new query API with extra options applied.\n   * @param options - query options to use\n   * @returns queryApi instance with the supplied options\n   */\n  with(options: Partial<QueryOptions>): QueryApi\n\n  /**\n   * Creates a cold observable of the lines returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of CSV result lines\n   */\n  lines(query: string | ParameterizedQuery): Observable<string>\n\n  /**\n   * Creates a cold observable of the rows returned by the given query.\n   *\n   * @param query - query\n   * @returns observable of result rows\n   */\n  rows(query: string | ParameterizedQuery): Observable<Row>\n\n  /**\n   * Executes the query and receives result lines (including empty and annotation lines)\n   * through the supplied consumer. See [annotated-csv](https://v2.docs.influxdata.com/v2.0/reference/syntax/annotated-csv/).\n   *\n   * @param query - query\n   * @param consumer - csv result lines and error consumer\n   */\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void\n\n  /**\n   * Executes the query and receives table metadata and rows through the supplied consumer.\n   *\n   * @param query - query\n   * @param consumer - result rows and error consumer\n   */\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void\n\n  /**\n   * QueryRaw executes a query and returns the full response as a string.\n   * Use with caution, a possibly huge stream is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of response text\n   */\n  queryRaw(query: string | ParameterizedQuery): Promise<string>\n\n  /**\n   * CollectRows executes the query and collects all the results in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of results is copied to memory.\n   *\n   * @param query - query\n   * @param rowMapper - maps the supplied row to an item that is then collected,\n   *  undefined return values are not collected. If no rowMapper is supplied,\n   *  `row => row.tableMeta.toObject(row.values)` is used.\n   * @returns Promise of mapped results\n   */\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>>\n\n  /**\n   * CollectLines executes the query and collects all result lines in the returned Promise.\n   * This method is suitable to collect simple results. Use with caution,\n   * a possibly huge stream of lines is copied to memory.\n   *\n   * @param query - query\n   * @returns Promise of returned csv lines\n   */\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>>\n}\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {Cancellable, CommunicationObserver} from '../results'\n\nexport type QueryExecutor = (consumer: CommunicationObserver<string>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<string>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<string>, executor: QueryExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: QueryExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions, Row, defaultRowMapping} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {chunksToLines} from '../results'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  linesToTables,\n} from '../results'\nimport ObservableQuery, {QueryExecutor} from './ObservableQuery'\nimport {ParameterizedQuery} from '../query/flux'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\nconst identity = <T>(value: T): T => value\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(private transport: Transport, org: string | QueryOptions) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, {...this.options, ...options})\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return new ObservableQuery(this.createExecutor(query), identity)\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return new ObservableQuery(this.createExecutor(query), observer => {\n      return linesToTables({\n        next(values, tableMeta) {\n          observer.next({values, tableMeta})\n        },\n        error(e) {\n          observer.error(e)\n        },\n        complete() {\n          observer.complete()\n        },\n      })\n    })\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    this.createExecutor(query)(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    this.createExecutor(query)(linesToTables(consumer))\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.queryRows(query, {\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.queryLines(query, {\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): QueryExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        chunksToLines(consumer, this.transport.chunkCombiner)\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://v2.docs.influxdata.com/v2.0/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\n\n/**\n * InfluxDB 2.0 entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, org)\n  }\n}\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public intField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseInt(String(value))))) {\n        throw new Error(\n          `Expected integer value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = `${Math.floor(value as number)}i`\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public floatField(name: string, value: number | any): Point {\n    if (typeof value !== 'number') {\n      let val: number\n      if (isNaN((val = parseFloat(value)))) {\n        throw new Error(\n          `Expected float value for field ${name}, but got '${value}'!`\n        )\n      }\n      value = val\n    }\n    this.fields[name] = String(value)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n"],"names":["createTextDecoderCombiner","decoder","TextDecoder","[object Object]","first","second","retVal","Uint8Array","length","set","chunk","start","end","subarray","toUtf8String","decode","chunksToLines","target","chunkCombiner","chunks","previous","finished","quoted","index","concat","c","next","copy","undefined","bufferReceived","e","this","error","complete","cancellable","useCancellable","self","cancel","isCancelled","LineSplitter","reuse","_reuse","val","reusedValues","Array","line","lastSplitLength","quoteCount","startIndex","values","count","i","getValue","push","substring","replace","FluxTableColumnImpl","newFluxTableColumn","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","IllegalArgumentError","Error","message","super","name","Object","setPrototypeOf","prototype","HttpError","statusMessage","body","retryAfter","contentType","startsWith","json","JSON","parse","code","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","retryJitter","Math","round","random","RequestTimedOutError","AbortError","identity","x","typeSerializers","boolean","unsignedLong","long","double","string","base64Binary","duration","dateTime:RFC3339","FluxTableMetaDataImpl","columns","forEach","col","label","acc","column","defaultValue","dataType","createFluxTableMetaData","linesToTables","consumer","splitter","withReuse","lastMeta","expectMeta","firstColumnIndex","splitLine","size","group","slice","DEFAULT_RetryDelayStrategyOptions","minRetryDelay","maxRetryDelay","exponentialBase","DEFAULT_WriteOptions","batchSize","flushInterval","writeFailed","writeSuccess","maxRetries","maxBufferLines","gzipThreshold","createEscaper","characters","replacements","value","from","found","indexOf","escape","measurement","escaper","createQuotedEscaper","tag","lastMillis","Date","now","stepsInMillis","nanos","millis","String","substr","micros","seconds","floor","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","convertTimeToNanos","consoleLogger","console","warn","provider","Logger","FLUX_VALUE","Symbol","FluxParameter","fluxValue","sanitizeString","toString","prepareRetVal","charAt","sanitizeFloat","isFinite","dot","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","RegExp","isArray","map","join","symbolObservable","observable","RetryStrategyImpl","options","success","failedAttempts","delay","min","max","currentDelay","RetryBuffer","maxLines","retryLines","lines","retryCount","closed","retryTime","nextRetryTime","origSize","newSize","newFirst","toAdd","last","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","clearTimeout","WriteBuffer","maxChunkRecords","flushFn","scheduleSend","record","flush","reset","Promise","resolve","WriteApiImpl","transport","org","bucket","precision","writeOptions","httpPath","encodeURIComponent","defaultTags","useDefaultTags","sendOptions","method","headers","content-type","writeBuffer","_clearFlushTimeout","sendBatch","bind","retryStrategy","retryBuffer","attempts","reject","responseStatusCode","callbacks","_headers","onRetry","call","addLines","nextDelay","send","add","records","point","toLineProtocol","points","withRetryBuffer","finally","remaining","close","tags","keys","key","getResponseHeaders","response","FetchTransport","connectionOptions","defaultHeaders","token","url","endsWith","path","observer","state","data","responseStarted","completeCommunicationObserver","cancelled","signal","controller","AbortController","abort","aborted","fetch","status","text","headerError","get","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","responseContentType","responseType","accept","other","request","stringify","credentials","requestDecorator","defaultRowMapping","tableMeta","toObject","QuerySubscription","executor","isClosed","noop","ObservableQuery","decorator","observerOrNext","completeObserver","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","QueryApiImpl","query","createExecutor","rowMapper","queryRows","queryLines","type","gzip","decorateRequest","dialect","accept-encoding","timeout","_options","TransportImpl","measurementName","fields","isNaN","parseFloat","time","settings","fieldsLine","sort","tagsLine","convertTime","canRetry","object","Boolean","strings","parts","partIndex","sanitized","sanitizeDateTime","logger","source","charCodeAt","use"],"mappings":"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"}