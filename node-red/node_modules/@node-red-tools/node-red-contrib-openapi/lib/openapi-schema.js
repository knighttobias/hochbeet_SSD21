"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = require("express");
var express_openapi_validator_1 = require("express-openapi-validator");
var object_hash_1 = __importDefault(require("object-hash"));
var openapi_schema_validator_1 = __importDefault(require("openapi-schema-validator"));
var helpers_1 = require("./helpers");
module.exports = function register(RED) {
    var schemaValidator = new openapi_schema_validator_1.default({
        version: 3,
    });
    var mainRouter = express_1.Router();
    if (RED.httpNode) {
        RED.httpNode.use(mainRouter);
    }
    RED.nodes.registerType('openapi-schema', function openapiSchemaNode(props) {
        var _this = this;
        RED.nodes.createNode(this, props);
        if (props.schema == null) {
            return;
        }
        var schema = props.schema;
        var result = schemaValidator.validate(schema);
        if (result.errors.length > 0) {
            this.error('Invalid OpenAPI schema:');
            result.errors.forEach(function (err) {
                _this.error('    ', err.message);
            });
            return;
        }
        var router = express_1.Router();
        var routes = [];
        this.baseURL = props.baseURL;
        this.schema = props.schema;
        this.router = function (fn) {
            routes.push(fn);
        };
        if (this.baseURL && this.baseURL !== '/') {
            mainRouter.use(this.baseURL, router);
        }
        else {
            mainRouter.use(router);
        }
        var validator = new express_openapi_validator_1.OpenApiValidator({
            apiSpec: schema,
            validateRequests: true,
            validateResponses: true,
        });
        validator.install(router).then(function () {
            routes.forEach(function (r) { return r(router); });
            routes.length = 0;
            router.use(function (err, req, res, next) {
                // it's an error from the middleware
                if (err.status === 404 && req.openapi != null) {
                    return next();
                }
                // format error
                res.status(err.status || 500).json({
                    message: err.message,
                    errors: err.errors,
                });
            });
        });
        this.on('close', function () {
            router.stack.length = 0;
            mainRouter.stack.forEach(function (route, i, routes) {
                if (route.handle === router) {
                    routes.splice(i, 1);
                }
            });
        });
    });
    if (RED.httpAdmin != null) {
        RED.httpAdmin.get('/openapi/:id/paths', function (req, res) {
            var schema = helpers_1.findSchema(RED, req.params.id);
            if (!schema) {
                return res.status(404).end();
            }
            return res.status(200).send(schema.paths);
        });
        RED.httpAdmin.post('/openapi/compare', function (req, res) {
            if (!req.body) {
                return res.status(400).end();
            }
            var _a = req.body, current = _a.current, next = _a.next;
            if (!current || !next) {
                return res.status(400).end();
            }
            var currentHash = object_hash_1.default(current);
            var otherHash = object_hash_1.default(next);
            return res.status(200).send(currentHash === otherHash);
        });
        RED.httpAdmin.post('/openapi/validate', function (req, res) {
            var schema = req.body;
            if (!schema) {
                return res.status(400).end();
            }
            return res.json(schemaValidator.validate(schema));
        });
    }
};
